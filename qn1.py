# ## Question 1

import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt


# ### 1a) Poisson distribution

def factorial(a):
    #Factorial of a number a
    a = np.round(a).astype(int)
    f=1
    for i in range(2, a+1):
        f = i*f
    return(f)

def poisson(lamda, k):
    # Generating a poisson distribution with mean lamda
    return ((lamda**k)*np.exp(-lamda))/factorial(k)

def q1a():
	# calculating value of poisson distribution for the gien values of lamda(l) and k
	l = np.array([1, 5, 3, 2.6], dtype='f')
	k = np.array([0, 10., 21, 40], dtype='f')
	for ind in range(0, len(l)):
		print('Poisson({},{}) = {}'.format(l[ind], k[ind],poisson(l[ind], k[ind])))


# ### 1b) RNG: using (M)LCG and XOR shift

def MLCG(I0, a = 1103515245 , c= 12345, m = 2**64):
    """ 
    Random number generator(RNG) using (Multip.) Linear Congruential Generator
    Inputs - 
    I0 : seed
    a,c,m: constants
    """
    x = I0
    # MLCG formula
    x = (a*x + c) %m 
    return x

def XOR_shift(x, a1 = 21, a2 = 35, a3 = 4):
    """ 
    RNG using 64-bit XOR shift method
    x : seed
    a1, a2, a3 : constants 
    """
    bit64 = 2**(64)-1 # generating a binary number that has 1's in all 64 bits
    x ^= (x << a1) & bit64
    x ^= (x >> a2) & bit64
    x ^= (x << a3) & bit64
    return x


## combining XOR shift and MLCG
def random(seed, a, b, n):
    """ Function to generate random numbers between (0,1) by combining MLCG and XOR shift
        Inputs-
        seed : seed for the random number generator
        (a, b) : range in which you want the random numbers
        n : number of random numbers to be generated
    """
    seed = np.round(seed).astype(int)
    nos = [] # to store list of n random numbers
    for i in range(0,n):
        seed_xor = MLCG(seed)
        # feeding random number generated by XOR shift method as seed to MLCG
        rand = XOR_shift(seed_xor)
        # updating seed for MLCG in the next iteration, as the random number generated by MLCG
        seed = rand
        nos.append(rand)
        
    #to ensure all numbers lie in (0, 1), maximum possible number that can be generated is 2**64
    U01 = np.array(nos)/(2**64) 
    return np.array((U01*(b-a)) + a, dtype='f') # making the uniform distribution lie in the specified range (a,b)    

def q1b():
	# generating 1000000 random numbers between (0,1) using a combination of MLCG and XOR shift
	seed = 158
	rng_arr = random(seed, 0, 1, 1000000)
	print('The seed for RNG is', seed)

	# scatter plot of (x(i+1) and x(i))
	plt.figure()
	plt.scatter(rng_arr[0:1000],rng_arr[1:1001])
	plt.title('Scatter plot of sequential random number plotted aainst each other(first 1000 numbers)')
	plt.xlabel('x[i]')
	plt.ylabel('x[i+1]')
	plt.savefig('rngscatter.png', bbox_inches = "tight")

	# binning in 20bins each 0.05 wide, and plotting 
	plt.figure()
	plt.hist(rng_arr, bins= np.linspace(0,1,21), edgecolor='black', linewidth=1.5)
	plt.title('Histogram of 1000000 uniformly sampled random numbers in (0,1) in bins of width 0.05')
	plt.xlabel('x[i]')
	plt.ylabel('x[i+1]')
	plt.savefig('rnghist.png', bbox_inches = "tight")

if __name__ == '__main__':
	print('1 (a):')
	q1a()
	print('1 (b):')
	q1b()
